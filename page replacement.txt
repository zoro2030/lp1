***************************************************************************
Main class

import java.util.*;
public class PageReplacement {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int ch;
		do{
			System.out.println("1-FCFS");
			System.out.println("2-LRU");
			System.out.println("3-Optimal");
			System.out.println("4-Exit");
			System.out.println("Enter Your Choice :");
			ch = input.nextInt();
			switch (ch) {
				case 1:
					FCFS fcfs = new FCFS();
					fcfs.execute();
					break;
				
				case 2:
					LRU lru = new LRU();
					lru.execute();
					break;
				
				case 3:
					Optimal optimal = new Optimal();
					optimal.execute();
					break;

				case 4:
					break;

				default:
					System.out.println("Oops!!Wrong Choice");
					break;
			}
		}while(ch!=4);
		input.close();
	}
}

***************************************************************************
FCFS

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
public class FCFS {
private Scanner sc;
public void execute() {
sc = new Scanner(System.in);
System.out.println("Enter Number of Pages:");
int numPages = sc.nextInt();
int pages[] = new int[numPages];
System.out.println("Enter Reference String: ");
for (int i = 0; i < numPages; i++) {
pages[i] = sc.nextInt();
}
System.out.println("Enter Number of Frames");
int capacity = sc.nextInt();
// To represent set of current pages
HashSet<Integer> frames = new HashSet<>(capacity);
// To store pages o=in FIFO manner
Queue<Integer> index = new LinkedList<>();
int pageFaults = 0;
int hits = 0;
for (int i = 0; i < numPages; i++) {
if (frames.size() < capacity) // check if set can hold n=more pages
{
// IF page not present insert into set and increment pagefault
if (!frames.contains(pages[i])) {
frames.add(pages[i]);
index.add(pages[i]); // push current page into queue
pageFaults++;
// System.out.println(pageFaults);
// frames.forEach(System.out::print);
for (int j : index)
System.out.print(j + "\t");
System.out.println();
} else {
hits++;
}
} else // set is full,need replacement
{
if (!frames.contains(pages[i])) // frame is not present present
{
int val = index.peek();
index.poll();
frames.remove(val);
frames.add(pages[i]);
index.add(pages[i]);
pageFaults++;
for (int j : index)
System.out.print(j + "\t");
System.out.println();
} else // frame is present in set
{
hits++;
}
}
}
System.out.println("Number of Page Faults : " + pageFaults);
System.out.println("Hits:\t" + hits);
System.out.println("hit ratio: " + ((double) hits / (double) numPages));
}
}


***************************************************************************
Optimal Search

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
public class Optimal {
private Scanner sc;
public void execute() {
sc = new Scanner(System.in);
System.out.println("Enter Number of Pages:");
int numPages = sc.nextInt();
int pages[] = new int[numPages];
System.out.println("Enter Reference String: ");
for (int i = 0; i < numPages; i++) {
pages[i] = sc.nextInt();
}
System.out.println("Enter Number of Frames");
int capacity = sc.nextInt();
HashSet<Integer> frames = new HashSet<>();
HashMap<Integer, Integer> index = new HashMap<>();
int pagefaults = 0;
int hits = 0;
for (int i = 0; i < numPages; i++) {
if (frames.size() < capacity) {
if (!frames.contains(pages[i])) {
pagefaults++;
frames.add(pages[i]);
// finding next access of page
int farthest = nextIndex(pages, i);
index.put(pages[i], farthest);
} else {
hits++;
index.put(pages[i], nextIndex(pages, i));
}
} else {
if (!frames.contains(pages[i])) {
int farthest = -1;
int val = 0;
Iterator<Integer> itr = frames.iterator();
while (itr.hasNext()) {
int temp = itr.next();
if (index.get(temp) > farthest) {
farthest = index.get(temp);
val = temp;
}
}
frames.remove(val);
index.remove(farthest);
frames.add(pages[i]);
pagefaults++;
int nextUse = nextIndex(pages, i);
index.put(pages[i], nextUse);
} else {
hits++;
index.put(pages[i], nextIndex(pages, i));
}
}
frames.forEach(System.out::print);
System.out.println();
}
System.out.println("Number of Page Faults : " + pagefaults);
System.out.println("Hits:\t" + hits);
System.out.println("hit ratio: " + ((double) hits / (double) numPages));
}
public static int nextIndex(int pages[], int curIndex) {
int farthest = curIndex;
int currentPage = pages[curIndex];
int j = farthest;
for (j = farthest + 1; j < pages.length; j++) {
if (pages[j] == currentPage) {
farthest = j;
return farthest; // 5 6 7 8 9
}
}
return Integer.MAX_VALUE;
}
}
*********************************************************************************
LRU

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;

public class LRU {
    private Scanner sc;

    public void execute() {
        sc = new Scanner(System.in);
        System.out.println("Enter Number of Pages:");
        int numPages = sc.nextInt();
        int pages[] = new int[numPages];
        System.out.println("Enter Reference String: ");
        for (int i = 0; i < numPages; i++) {
            pages[i] = sc.nextInt();
        }

        System.out.println("Enter Number of Frames");
        int capacity = sc.nextInt();

        // To represent set of current pages
        HashSet<Integer> frames = new HashSet<>(capacity);

        // To store LRU Indexes of pages //<key=Page,value=index>
        HashMap<Integer, Integer> index = new HashMap<>();
        int pageFaults = 0;
        int hits = 0;
        for (int i = 0; i < numPages; i++) {
            if (frames.size() < capacity) // check if set can hold n=more pages
            {
                // IF page not present insert into set and increment pagefault
                if (!frames.contains(pages[i])) {
                    frames.add(pages[i]);
                    index.put(pages[i], i); // push current page into queue
                    pageFaults++;

                    /*
                     * for(int j:index)
                     * System.out.print(j+"\t");
                     * System.out.println();
                     */
                } else {
                    hits++;
                    index.put(pages[i], i);
                }
            } else // set is full,need replacement
            {
                if (!frames.contains(pages[i])) // frame is not present present
                {
                    int lru = Integer.MAX_VALUE;
                    int val = Integer.MIN_VALUE;

                    Iterator<Integer> itr = frames.iterator();
                    while (itr.hasNext()) {
                        int temp = itr.next();
                        if (index.get(temp) < lru) {
                            lru = index.get(temp);
                            val = temp;
                        }
                    }

                    frames.remove(val);
                    frames.add(pages[i]);
                    pageFaults++;
                    index.put(pages[i], i);
                } else // frame is present in set
                {
                    hits++;
                    index.put(pages[i], i);
                }
            }
            frames.forEach(System.out::print);
            System.out.println();
        }

        System.out.println("Number of Page Faults : " + pageFaults);
        System.out.println("Hits:\t" + hits);
        System.out.println("hit ratio: " + ((double) hits / (double) numPages));

    }
}

/*
 * Enter Number of Pages:
 * 12
 * Enter Reference String:
 * 2 3 2 1 5 2 4 5 3 2 5 2
 * Enter Number of Frames
 * 3
 * 2
 * 23
 * 23
 * 123
 * 152
 * 152
 * 452
 * 452
 * 453
 * 523
 * 523
 * 523
 * Number of Page Faults : 7
 * Hits: 5
 * hit ratio: 0.4166666666666667
 */
******************************************************************************************
//According to my logic:

//FCFS
import java.util.Scanner;
public class FCFS {
public static boolean is_present(int n, int frame[], int f) {
int flag = 0;
for (int i = 0; i < f; i++) {
if (frame[i] == n) {
flag = 1;
break;
}
}
if (flag == 1) {
return true;
} else
return false;
}
public void execute() {
int s, no_frame, pagefault;
int hits = 0;
int p = 0;
Scanner sc = new Scanner(System.in);
System.out.print("Enter number of pages :");
s = sc.nextInt();
int[] sequence = new int[s];
System.out.println("Enter sequence :");
for (int i = 0; i < s; i++) {
sequence[i] = sc.nextInt();
}
System.out.print("Enter number of frames :");
no_frame = sc.nextInt();
pagefault = 0;
int[] frame = new int[no_frame];
for (int i = 0; i < no_frame; i++) {
frame[i] = -1;
}
System.out.println();
for (int i = 0; i < s; i++) {
if (!is_present(sequence[i], frame, no_frame)) {
if (p < no_frame) {
frame[p] = sequence[i];
p++;
} else {
p = 0;
frame[p] = sequence[i];
p++;
}
pagefault++;
for (int k = 0; k < no_frame; k++) {
System.out.print(frame[k] + "\t");
}
System.out.println();
} else {
hits++;
for (int k = 0; k < no_frame; k++) {
System.out.print(frame[k] + "\t");
}
System.out.println();
}
}
System.out.println("Faults :" + pagefault);
System.out.println("Hits :" + hits);
sc.close();
}
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Optimal Search
public static boolean is_present(int n,int frame[],int f){
int flag = 0;
for(int i = 0; i < f ; i++){
if(frame[i] == n){
flag = 1;
break;
}
}
if (flag == 1) {
return true;
}
else
return false;
}
public int search(int[] frame, int no_frame, int[] sequence, int s, int j) {
int flag = 0;
int min = 127;
for (int i = 0; i < no_frame; i++) {
flag = 0;
for (int k = no_frame; k < s; k++) {
if (frame[i] == sequence[k]) {
flag = 1;
if(i < min ){
min = i;
}
}
}
if(flag == 0){
return i;
}
}
return min;
}
public void execute(){
Scanner sc = new Scanner(System.in);
int s;
System.out.print("Enter the number of pages: ");
s = sc.nextInt();
int[] sequence = new int[s];
System.out.println("Enter the page no. :");
for(int i=0;i<s;i++)
{
sequence[i] = sc.nextInt();
}
int no_frame;
System.out.print("Enter the number of frames: ");
no_frame = sc.nextInt();
int pagefault = no_frame,hits=0;
int[] frame = new int[no_frame];
for(int i=0;i<no_frame;i++)
{
frame[i]=sequence[i];
}
int count = 0;
for(int i=1;i<no_frame;i++)
{
for(int j = 0 ; j < i ;j++){
if(frame[i]==sequence[j]){
count = count + 1;
}
}
}
pagefault = pagefault - count;
hits = count;
for (int i = no_frame; i <s; i++ ){
if(!is_present(sequence[i], frame, no_frame)){
frame[search(frame , no_frame,sequence,s,i)] = sequence[i];
pagefault++;
for(int k = 0 ; k < no_frame; k++){
System.out.print(frame[k] + "\t");
}
System.out.println();
}
else{
hits++;
for(int k = 0 ; k < no_frame; k++){
System.out.print(frame[k] + "\t");
}
System.out.println();
}
}
System.out.println("Faults :" + pagefault);
System.out.println("Hits :" + hits);
sc.close();
}
